//
// ReactionComment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** ReactionComment */

open class ReactionComment: Codable {

    public var id: Id?
    public var userId: UserId?
    public var reactionId: Id
    public var reactionUserId: UserId?
    public var isDeleted: Bool?
    public var commentTime: Int64?
    public var timeOffset: Double?
    public var comment: String


    
    public init(id: Id?, userId: UserId?, reactionId: Id, reactionUserId: UserId?, isDeleted: Bool?, commentTime: Int64?, timeOffset: Double?, comment: String) {
        self.id = id
        self.userId = userId
        self.reactionId = reactionId
        self.reactionUserId = reactionUserId
        self.isDeleted = isDeleted
        self.commentTime = commentTime
        self.timeOffset = timeOffset
        self.comment = comment
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "_id")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encode(reactionId, forKey: "reactionId")
        try container.encodeIfPresent(reactionUserId, forKey: "reactionUserId")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(commentTime, forKey: "commentTime")
        try container.encodeIfPresent(timeOffset, forKey: "timeOffset")
        try container.encode(comment, forKey: "comment")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(Id.self, forKey: "_id")
        userId = try container.decodeIfPresent(UserId.self, forKey: "userId")
        reactionId = try container.decode(Id.self, forKey: "reactionId")
        reactionUserId = try container.decodeIfPresent(UserId.self, forKey: "reactionUserId")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        commentTime = try container.decodeIfPresent(Int64.self, forKey: "commentTime")
        timeOffset = try container.decodeIfPresent(Double.self, forKey: "timeOffset")
        comment = try container.decode(String.self, forKey: "comment")
    }
}

