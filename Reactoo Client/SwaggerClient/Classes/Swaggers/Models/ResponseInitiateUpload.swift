//
// ResponseInitiateUpload.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Response model for upload endpoints. */

open class ResponseInitiateUpload: Codable {

    public enum UrlType: String, Codable { 
        case s3 = "s3"
        case cloudfront = "cloudfront"
    }
    public enum HttpMethod: String, Codable { 
        case _get = "GET"
        case head = "HEAD"
        case options = "OPTIONS"
        case put = "PUT"
        case post = "POST"
        case delete = "DELETE"
    }
    public var signedUrl: String
    public var urlType: UrlType?
    public var httpMethod: HttpMethod?
    public var expires: Int?


    
    public init(signedUrl: String, urlType: UrlType?, httpMethod: HttpMethod?, expires: Int?) {
        self.signedUrl = signedUrl
        self.urlType = urlType
        self.httpMethod = httpMethod
        self.expires = expires
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(signedUrl, forKey: "signedUrl")
        try container.encodeIfPresent(urlType, forKey: "urlType")
        try container.encodeIfPresent(httpMethod, forKey: "httpMethod")
        try container.encodeIfPresent(expires, forKey: "expires")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        signedUrl = try container.decode(String.self, forKey: "signedUrl")
        urlType = try container.decodeIfPresent(UrlType.self, forKey: "urlType")
        httpMethod = try container.decodeIfPresent(HttpMethod.self, forKey: "httpMethod")
        expires = try container.decodeIfPresent(Int.self, forKey: "expires")
    }
}

