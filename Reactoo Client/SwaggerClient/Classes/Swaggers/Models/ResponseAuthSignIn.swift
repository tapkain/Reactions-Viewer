//
// ResponseAuthSignIn.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Response model for auth/signIn and auth/confirmSignUp endpoints returned upon successful user code confirmation. */

open class ResponseAuthSignIn: Codable {

    public enum TokenType: String, Codable { 
        case bearer = "Bearer"
        case empty = ""
    }
    /** The token type. */
    public var tokenType: TokenType?
    /** The expiration period of the authentication result in seconds. */
    public var expiresIn: Int64?
    /** The access token. */
    public var accessToken: String
    /** The refresh token. */
    public var refreshToken: String?
    /** The ID token. */
    public var idToken: String


    
    public init(tokenType: TokenType?, expiresIn: Int64?, accessToken: String, refreshToken: String?, idToken: String) {
        self.tokenType = tokenType
        self.expiresIn = expiresIn
        self.accessToken = accessToken
        self.refreshToken = refreshToken
        self.idToken = idToken
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(tokenType, forKey: "tokenType")
        try container.encodeIfPresent(expiresIn, forKey: "expiresIn")
        try container.encode(accessToken, forKey: "accessToken")
        try container.encodeIfPresent(refreshToken, forKey: "refreshToken")
        try container.encode(idToken, forKey: "idToken")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        tokenType = try container.decodeIfPresent(TokenType.self, forKey: "tokenType")
        expiresIn = try container.decodeIfPresent(Int64.self, forKey: "expiresIn")
        accessToken = try container.decode(String.self, forKey: "accessToken")
        refreshToken = try container.decodeIfPresent(String.self, forKey: "refreshToken")
        idToken = try container.decode(String.self, forKey: "idToken")
    }
}

