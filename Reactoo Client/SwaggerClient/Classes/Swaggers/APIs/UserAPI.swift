//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Fetch user by Id
     
     - parameter id: (query) User Id. Value must match UserId model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserById(id: String, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getUserByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch user by Id
     - GET /user
     - Fetches user by Id and returns User model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "scoreIsFire" : false,
  "reactionsCount" : 0,
  "scoreIsWeeklyTop" : false,
  "videosCount" : 0,
  "bio" : "bio",
  "isAdmin" : false,
  "scoreIcon" : "chick",
  "isMsgPublic" : true,
  "weeklyScore" : 0,
  "score" : 0,
  "isDeleted" : false,
  "avatarFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "displayname" : "displayname",
  "isPublic" : true,
  "isCampaign" : false,
  "_id" : { },
  "followersCount" : 0,
  "relationship" : "unknown",
  "username" : "username",
  "followingsCount" : 0
}}]
     
     - parameter id: (query) User Id. Value must match UserId model. 

     - returns: RequestBuilder<User> 
     */
    open class func getUserByIdWithRequestBuilder(id: String) -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch current user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserMyself(completion: @escaping ((_ data: UserMe?,_ error: Error?) -> Void)) {
        getUserMyselfWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch current user
     - GET /user/me
     - Fetches caller of this method as user model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<UserMe> 
     */
    open class func getUserMyselfWithRequestBuilder() -> RequestBuilder<UserMe> {
        let path = "/user/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserMe>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getUsers: String { 
        case leaderboard = "leaderboard"
        case leaderboardWeekly = "leaderboard-weekly"
        case recentReactors = "recent-reactors"
        case followings = "followings"
        case followers = "followers"
        case blocking = "blocking"
        case pendingFollowers = "pending-followers"
        case promoted = "promoted"
        case ids = "ids"
    }

    /**
     Fetch multiple users
     
     - parameter type: (query) User list type. Value must match RequestUserListType model. 
     - parameter userId: (query) User Id. Value must match UserId model. (optional)
     - parameter ids: (query) Comma-separated list of User Ids. (optional)
     - parameter startKey: (query) User list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) User list size. Value must match RequestListSize model. (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(type: ModelType_getUsers, userId: String? = nil, ids: String? = nil, startKey: Data? = nil, size: Int? = nil, completion: @escaping ((_ data: UserList?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(type: type, userId: userId, ids: ids, startKey: startKey, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch multiple users
     - GET /user/list
     - Fetches list of users and returns UserList model containing zero or more User models.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]
     
     - parameter type: (query) User list type. Value must match RequestUserListType model. 
     - parameter userId: (query) User Id. Value must match UserId model. (optional)
     - parameter ids: (query) Comma-separated list of User Ids. (optional)
     - parameter startKey: (query) User list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) User list size. Value must match RequestListSize model. (optional, default to 20)

     - returns: RequestBuilder<UserList> 
     */
    open class func getUsersWithRequestBuilder(type: ModelType_getUsers, userId: String? = nil, ids: String? = nil, startKey: Data? = nil, size: Int? = nil) -> RequestBuilder<UserList> {
        let path = "/user/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId, 
            "ids": ids, 
            "startKey": startKey, 
            "type": type.rawValue, 
            "size": size?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<UserList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Initiate avatar upload of current user
     
     - parameter id: (query) Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initiateMyAvatarUpload(id: UUID, completion: @escaping ((_ data: ResponseInitiateUpload?,_ error: Error?) -> Void)) {
        initiateMyAvatarUploadWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Initiate avatar upload of current user
     - POST /user/me/avatar/initiateUpload
     - Initiates avatar upload of current user and returns AWS signed URL to S3 or CloudFront services to upload an actual thumbnail file, preferably using AWS S3 uploader.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "urlType" : "s3",
  "expires" : 0,
  "httpMethod" : "PUT",
  "signedUrl" : "signedUrl"
}}]
     
     - parameter id: (query) Id. Value must match Id model. 

     - returns: RequestBuilder<ResponseInitiateUpload> 
     */
    open class func initiateMyAvatarUploadWithRequestBuilder(id: UUID) -> RequestBuilder<ResponseInitiateUpload> {
        let path = "/user/me/avatar/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<ResponseInitiateUpload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Publish avatar of current user
     
     - parameter id: (query) Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publishMyAvatar(id: UUID, completion: @escaping ((_ error: Error?) -> Void)) {
        publishMyAvatarWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Publish avatar of current user
     - POST /user/me/avatar/publish
     - Publishes and propagates newly uploaded avatar of currently logged in user. Call this endpoint after successful avatar upload to AWS signed URL obtained from initiateMyAvatarUpload operation.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter id: (query) Id. Value must match Id model. 

     - returns: RequestBuilder<Void> 
     */
    open class func publishMyAvatarWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        let path = "/user/me/avatar/publish"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Updates current user
     
     - parameter userMe: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMyself(userMe: UserMe, completion: @escaping ((_ error: Error?) -> Void)) {
        updateMyselfWithRequestBuilder(userMe: userMe).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Updates current user
     - PUT /user/me
     - Updates current user.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter userMe: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateMyselfWithRequestBuilder(userMe: UserMe) -> RequestBuilder<Void> {
        let path = "/user/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userMe)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
