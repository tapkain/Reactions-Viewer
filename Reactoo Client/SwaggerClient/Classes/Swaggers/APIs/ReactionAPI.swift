//
// ReactionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ReactionAPI {
    /**
     Delete reaction
     
     - parameter id: (query) Video Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteReaction(id: UUID, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteReactionWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete reaction
     - DELETE /reaction
     - Deletes reaction.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter id: (query) Video Id. Value must match Id model. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteReactionWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        let path = "/reaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch reaction by Id
     
     - parameter id: (query) Reaction Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactionById(id: UUID, completion: @escaping ((_ data: Reaction?,_ error: Error?) -> Void)) {
        getReactionByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch reaction by Id
     - GET /reaction
     - Fetches reaction by Id and returns Reaction model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "likesCounts" : {
    "love" : 7,
    "sad" : 2,
    "lol" : 9,
    "angry" : 4,
    "wow" : 3
  },
  "orientation" : 7,
  "hashtags" : [ "hashtags", "hashtags" ],
  "recordVolume" : 0.5962133916683182,
  "isUserPublic" : true,
  "isPrivate" : false,
  "title" : "title",
  "thumbnailFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "userId" : { },
  "originalVideoUserId" : null,
  "duration" : 0.14658129805029452,
  "videoFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "featuredTime" : 0,
  "likesCount" : 0,
  "adType" : "default",
  "isDeleted" : false,
  "publishingTime" : 0,
  "commentsCount" : 0,
  "originalVideoId" : null,
  "timeline" : [ {
    "reactionTimestamp" : 0.12315135367772556,
    "contentTimestamp" : 0.10246457001441578,
    "event" : "play"
  }, {
    "reactionTimestamp" : 0.12315135367772556,
    "contentTimestamp" : 0.10246457001441578,
    "event" : "play"
  } ],
  "_id" : { },
  "isFeatured" : false
}}]
     
     - parameter id: (query) Reaction Id. Value must match Id model. 

     - returns: RequestBuilder<Reaction> 
     */
    open class func getReactionByIdWithRequestBuilder(id: UUID) -> RequestBuilder<Reaction> {
        let path = "/reaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Reaction>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch reaction comment by Id
     
     - parameter id: (query) Reaction Comment Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactionCommentById(id: UUID, completion: @escaping ((_ data: ReactionComment?,_ error: Error?) -> Void)) {
        getReactionCommentByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch reaction comment by Id
     - GET /reaction/comment
     - Fetches reaction comment by Id and returns ReactionComment model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "reactionUserId" : null,
  "isDeleted" : false,
  "reactionId" : null,
  "timeOffset" : 0.6027456183070403,
  "comment" : "comment",
  "_id" : { },
  "userId" : { },
  "commentTime" : 0
}}]
     
     - parameter id: (query) Reaction Comment Id. Value must match Id model. 

     - returns: RequestBuilder<ReactionComment> 
     */
    open class func getReactionCommentByIdWithRequestBuilder(id: UUID) -> RequestBuilder<ReactionComment> {
        let path = "/reaction/comment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<ReactionComment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getReactionComments: String { 
        case reaction = "reaction"
    }

    /**
     * enum for parameter includeUserModels
     */
    public enum IncludeUserModels_getReactionComments: String { 
         
         
        case _0 = "0"
        case _1 = "1"
        case empty = ""
    }

    /**
     Fetch multiple reaction comments
     
     - parameter type: (query) Reaction comment list type. Value must match RequestReactionCommentListType model. 
     - parameter reactionId: (query) Reaction Id. Value must match ReactionId model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter startKey: (query) Reaction comment list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) Reaction comment list size. Value must match RequestListSize model. (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactionComments(type: ModelType_getReactionComments, reactionId: String? = nil, includeUserModels: IncludeUserModels_getReactionComments? = nil, startKey: Data? = nil, size: Int? = nil, completion: @escaping ((_ data: ReactionCommentList?,_ error: Error?) -> Void)) {
        getReactionCommentsWithRequestBuilder(type: type, reactionId: reactionId, includeUserModels: includeUserModels, startKey: startKey, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch multiple reaction comments
     - GET /reaction/comment/list
     - Fetches list of reaction comments and returns ReactionCommentList model containing zero or more ReactionComment models.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]
     
     - parameter type: (query) Reaction comment list type. Value must match RequestReactionCommentListType model. 
     - parameter reactionId: (query) Reaction Id. Value must match ReactionId model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter startKey: (query) Reaction comment list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) Reaction comment list size. Value must match RequestListSize model. (optional, default to 20)

     - returns: RequestBuilder<ReactionCommentList> 
     */
    open class func getReactionCommentsWithRequestBuilder(type: ModelType_getReactionComments, reactionId: String? = nil, includeUserModels: IncludeUserModels_getReactionComments? = nil, startKey: Data? = nil, size: Int? = nil) -> RequestBuilder<ReactionCommentList> {
        let path = "/reaction/comment/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "reactionId": reactionId, 
            "includeUserModels": includeUserModels?.rawValue, 
            "startKey": startKey, 
            "type": type.rawValue, 
            "size": size?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ReactionCommentList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch reaction like by Id
     
     - parameter id: (query) Reaction Like Id. Value must match MongoObjectId model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactionLikeById(id: String, completion: @escaping ((_ data: ReactionLike?,_ error: Error?) -> Void)) {
        getReactionLikeByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch reaction like by Id
     - GET /reaction/like
     - Fetches reaction like by Id and returns ReactionLike model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "reactionUserId" : null,
  "reactionId" : { },
  "timeOffset" : 0.6027456183070403,
  "_id" : { },
  "type" : "love",
  "userId" : { },
  "likeTime" : 0
}}]
     
     - parameter id: (query) Reaction Like Id. Value must match MongoObjectId model. 

     - returns: RequestBuilder<ReactionLike> 
     */
    open class func getReactionLikeByIdWithRequestBuilder(id: String) -> RequestBuilder<ReactionLike> {
        let path = "/reaction/like"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<ReactionLike>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getReactionLikes: String { 
        case reaction = "reaction"
    }

    /**
     * enum for parameter includeUserModels
     */
    public enum IncludeUserModels_getReactionLikes: String { 
         
         
        case _0 = "0"
        case _1 = "1"
        case empty = ""
    }

    /**
     Fetch multiple reaction likes
     
     - parameter type: (query) Reaction like list type. Value must match RequestReactionCommentListType model. 
     - parameter reactionId: (query) Reaction Id. Value must match ReactionId model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter startKey: (query) Reaction like list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) Reaction like list size. Value must match RequestListSize model. (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactionLikes(type: ModelType_getReactionLikes, reactionId: String? = nil, includeUserModels: IncludeUserModels_getReactionLikes? = nil, startKey: Data? = nil, size: Int? = nil, completion: @escaping ((_ data: ReactionLikeList?,_ error: Error?) -> Void)) {
        getReactionLikesWithRequestBuilder(type: type, reactionId: reactionId, includeUserModels: includeUserModels, startKey: startKey, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch multiple reaction likes
     - GET /reaction/like/list
     - Fetches list of reaction likes and returns ReactionCommentList model containing zero or more ReactionComment models.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]
     
     - parameter type: (query) Reaction like list type. Value must match RequestReactionCommentListType model. 
     - parameter reactionId: (query) Reaction Id. Value must match ReactionId model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter startKey: (query) Reaction like list start key. Value must match RequestListStartKey model. (optional)
     - parameter size: (query) Reaction like list size. Value must match RequestListSize model. (optional, default to 20)

     - returns: RequestBuilder<ReactionLikeList> 
     */
    open class func getReactionLikesWithRequestBuilder(type: ModelType_getReactionLikes, reactionId: String? = nil, includeUserModels: IncludeUserModels_getReactionLikes? = nil, startKey: Data? = nil, size: Int? = nil) -> RequestBuilder<ReactionLikeList> {
        let path = "/reaction/like/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "reactionId": reactionId, 
            "includeUserModels": includeUserModels?.rawValue, 
            "startKey": startKey, 
            "type": type.rawValue, 
            "size": size?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ReactionLikeList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getReactions: String { 
        case hot = "hot"
        case following = "following"
        case video = "video"
        case hashtag = "hashtag"
        case user = "user"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getReactions: String { 
        case popular = "popular"
        case followings = "followings"
        case latest = "latest"
    }

    /**
     * enum for parameter includeUserModels
     */
    public enum IncludeUserModels_getReactions: String { 
         
         
        case _0 = "0"
        case _1 = "1"
        case empty = ""
    }

    /**
     Fetch multiple reactions
     
     - parameter type: (query) Reaction list type. Value must match RequestReactionListType model. 
     - parameter excludeReactionId: (query) Exclude specific reaction. Value must match Id model. (optional)
     - parameter userId: (query) Show reactions posted by specific user. Value must match UserId model. (optional)
     - parameter sort: (query) Sorting method. Value must match RequestReactionListSort model. (optional, default to latest)
     - parameter videoId: (query) Show reactions to specific video. Value must match Id model. (optional)
     - parameter startKey: (query) Reaction list start key. Value must match RequestListStartKey model. (optional)
     - parameter hashtag: (query) Fetch reactions containing specific hashtag. Value must match Hashtag model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter size: (query) Reaction list size. Value must match RequestListSize model. (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getReactions(type: ModelType_getReactions, excludeReactionId: UUID? = nil, userId: String? = nil, sort: Sort_getReactions? = nil, videoId: UUID? = nil, startKey: Data? = nil, hashtag: String? = nil, includeUserModels: IncludeUserModels_getReactions? = nil, size: Int? = nil, completion: @escaping ((_ data: ReactionList?,_ error: Error?) -> Void)) {
        getReactionsWithRequestBuilder(type: type, excludeReactionId: excludeReactionId, userId: userId, sort: sort, videoId: videoId, startKey: startKey, hashtag: hashtag, includeUserModels: includeUserModels, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch multiple reactions
     - GET /reaction/list
     - Fetches list of reactions and returns ReactionList model containing zero or more Reactions models.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]
     
     - parameter type: (query) Reaction list type. Value must match RequestReactionListType model. 
     - parameter excludeReactionId: (query) Exclude specific reaction. Value must match Id model. (optional)
     - parameter userId: (query) Show reactions posted by specific user. Value must match UserId model. (optional)
     - parameter sort: (query) Sorting method. Value must match RequestReactionListSort model. (optional, default to latest)
     - parameter videoId: (query) Show reactions to specific video. Value must match Id model. (optional)
     - parameter startKey: (query) Reaction list start key. Value must match RequestListStartKey model. (optional)
     - parameter hashtag: (query) Fetch reactions containing specific hashtag. Value must match Hashtag model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter size: (query) Reaction list size. Value must match RequestListSize model. (optional, default to 20)

     - returns: RequestBuilder<ReactionList> 
     */
    open class func getReactionsWithRequestBuilder(type: ModelType_getReactions, excludeReactionId: UUID? = nil, userId: String? = nil, sort: Sort_getReactions? = nil, videoId: UUID? = nil, startKey: Data? = nil, hashtag: String? = nil, includeUserModels: IncludeUserModels_getReactions? = nil, size: Int? = nil) -> RequestBuilder<ReactionList> {
        let path = "/reaction/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "excludeReactionId": excludeReactionId, 
            "userId": userId, 
            "sort": sort?.rawValue, 
            "videoId": videoId, 
            "startKey": startKey, 
            "type": type.rawValue, 
            "hashtag": hashtag, 
            "includeUserModels": includeUserModels?.rawValue, 
            "size": size?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<ReactionList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Initiate reaction upload
     
     - parameter id: (query) Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initiateReactionUpload(id: UUID, completion: @escaping ((_ data: ResponseInitiateUpload?,_ error: Error?) -> Void)) {
        initiateReactionUploadWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Initiate reaction upload
     - POST /reaction/initiateUpload
     - Initiates reaction upload and returns AWS signed URL to S3 or CloudFront services to upload an actual reaction file, preferably using AWS S3 uploader.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "urlType" : "s3",
  "expires" : 0,
  "httpMethod" : "PUT",
  "signedUrl" : "signedUrl"
}}]
     
     - parameter id: (query) Id. Value must match Id model. 

     - returns: RequestBuilder<ResponseInitiateUpload> 
     */
    open class func initiateReactionUploadWithRequestBuilder(id: UUID) -> RequestBuilder<ResponseInitiateUpload> {
        let path = "/reaction/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<ResponseInitiateUpload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update reaction
     
     - parameter id: (query) Reaction Id. Value must match Id model. 
     - parameter reaction: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateReaction(id: UUID, reaction: Reaction, completion: @escaping ((_ error: Error?) -> Void)) {
        updateReactionWithRequestBuilder(id: id, reaction: reaction).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update reaction
     - PUT /reaction
     - Updates reaction.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter id: (query) Reaction Id. Value must match Id model. 
     - parameter reaction: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateReactionWithRequestBuilder(id: UUID, reaction: Reaction) -> RequestBuilder<Void> {
        let path = "/reaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reaction)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
