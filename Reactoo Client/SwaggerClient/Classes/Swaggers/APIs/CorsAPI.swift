//
// CorsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CorsAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authChangePasswordOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authChangePasswordOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/changePassword
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authChangePasswordOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/changePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authConfirmForgotPasswordOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authConfirmForgotPasswordOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/confirmForgotPassword
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authConfirmForgotPasswordOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/confirmForgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authConfirmSignUpOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authConfirmSignUpOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/confirmSignUp
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authConfirmSignUpOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/confirmSignUp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authForgotPasswordOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authForgotPasswordOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/forgotPassword
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authForgotPasswordOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/forgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authRefreshTokenOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authRefreshTokenOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/refreshToken
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authRefreshTokenOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/refreshToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authResendConfirmationCodeOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authResendConfirmationCodeOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/resendConfirmationCode
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authResendConfirmationCodeOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/resendConfirmationCode"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignInOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authSignInOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/signIn
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authSignInOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/signIn"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authSignUpOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authSignUpOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/signUp
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authSignUpOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/signUp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authTestCredentialsOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        authTestCredentialsOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /auth/testCredentials
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func authTestCredentialsOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/auth/testCredentials"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionCommentListOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionCommentListOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/comment/list
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionCommentListOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/comment/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionCommentOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionCommentOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/comment
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionCommentOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/comment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionInitiateUploadOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionInitiateUploadOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/initiateUpload
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionInitiateUploadOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionLikeListOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionLikeListOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/like/list
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionLikeListOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/like/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionLikeOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionLikeOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/like
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionLikeOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/like"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionListOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionListOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction/list
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionListOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reactionOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        reactionOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /reaction
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func reactionOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/reaction"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func swaggerJsonOptions(completion: @escaping ((_ data: ResponseEmpty?,_ error: Error?) -> Void)) {
        swaggerJsonOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - OPTIONS /swagger.json
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - examples: [{contentType=application/json, example={ }}]

     - returns: RequestBuilder<ResponseEmpty> 
     */
    open class func swaggerJsonOptionsWithRequestBuilder() -> RequestBuilder<ResponseEmpty> {
        let path = "/swagger.json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseEmpty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func swaggerYmlOptions(completion: @escaping ((_ data: ResponseEmpty?,_ error: Error?) -> Void)) {
        swaggerYmlOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - OPTIONS /swagger.yml
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - examples: [{output=none}]

     - returns: RequestBuilder<ResponseEmpty> 
     */
    open class func swaggerYmlOptionsWithRequestBuilder() -> RequestBuilder<ResponseEmpty> {
        let path = "/swagger.yml"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ResponseEmpty>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        userListOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /user/list
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func userListOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userMeAvatarInitiateUploadOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        userMeAvatarInitiateUploadOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /user/me/avatar/initiateUpload
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func userMeAvatarInitiateUploadOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/me/avatar/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userMeAvatarPublishOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        userMeAvatarPublishOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /user/me/avatar/publish
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func userMeAvatarPublishOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/me/avatar/publish"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userMeOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        userMeOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /user/me
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func userMeOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        userOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /user
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func userOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoInitiateUploadOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        videoInitiateUploadOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /video/initiateUpload
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func videoInitiateUploadOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/video/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoInitiateUploadPublicOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        videoInitiateUploadPublicOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /video/initiateUploadPublic
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func videoInitiateUploadPublicOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/video/initiateUploadPublic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoListOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        videoListOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /video/list
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func videoListOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/video/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func videoOptions(completion: @escaping ((_ error: Error?) -> Void)) {
        videoOptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - OPTIONS /video
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func videoOptionsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/video"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "OPTIONS", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
