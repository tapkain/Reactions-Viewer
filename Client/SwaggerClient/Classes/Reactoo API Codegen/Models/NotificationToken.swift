//
// NotificationToken.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** NotificationToken */

open class NotificationToken: Codable {

    public enum Platform: String, Codable { 
        case ios = "ios"
        case android = "android"
    }
    public enum Env: String, Codable { 
        case prod = "PROD"
        case dev = "DEV"
    }
    public var token: String
    public var udid: UUID
    public var platform: Platform
    public var env: Env
    public var updated: Int64?


    
    public init(token: String, udid: UUID, platform: Platform, env: Env, updated: Int64?) {
        self.token = token
        self.udid = udid
        self.platform = platform
        self.env = env
        self.updated = updated
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(token, forKey: "token")
        try container.encode(udid, forKey: "udid")
        try container.encode(platform, forKey: "platform")
        try container.encode(env, forKey: "env")
        try container.encodeIfPresent(updated, forKey: "updated")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        token = try container.decode(String.self, forKey: "token")
        udid = try container.decode(UUID.self, forKey: "udid")
        platform = try container.decode(Platform.self, forKey: "platform")
        env = try container.decode(Env.self, forKey: "env")
        updated = try container.decodeIfPresent(Int64.self, forKey: "updated")
    }
}

