//
// Reaction.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Reaction */

open class Reaction: Codable {

    public enum AdType: String, Codable { 
        case _default = "default"
        case trending = "trending"
        case featured = "featured"
        case latest = "latest"
        case intro = "intro"
        case followingreaction = "followingReaction"
        case followingvideo = "followingVideo"
    }
    /** Standardised Id attribute matching &#39;uuid&#39; regex pattern. Can not be updated. */
    public var id: UUID?
    /** UserId standardised attribute matching &#39;region_uuid&#39; or &#39;uuid&#39; regex pattern. Can not be updated. */
    public var userId: String?
    /** Standardised Id attribute matching &#39;uuid&#39; regex pattern. Can not be updated. */
    public var originalVideoId: UUID?
    /** UserId standardised attribute matching &#39;region_uuid&#39; or &#39;uuid&#39; regex pattern. Can not be updated. */
    public var originalVideoUserId: String?
    public var title: String?
    public var isDeleted: Bool?
    public var isPrivate: Bool?
    public var isUserPublic: Bool?
    public var isFeatured: Bool?
    public var publishingTime: Int64?
    public var featuredTime: Int64?
    public var duration: Double?
    public var recordVolume: Double?
    public var likesCount: Int64?
    public var commentsCount: Int64?
    public var likesCounts: ReactionLikesCounts?
    public var thumbnailFiles: [MediaFile]?
    public var videoFiles: [MediaFile]?
    public var hashtags: [String]?
    public var adType: AdType?
    public var orientation: Int?
//    public var timeline: [TimelineEvent]?


    
    public init(id: UUID?, userId: String?, originalVideoId: UUID?, originalVideoUserId: String?, title: String?, isDeleted: Bool?, isPrivate: Bool?, isUserPublic: Bool?, isFeatured: Bool?, publishingTime: Int64?, featuredTime: Int64?, duration: Double?, recordVolume: Double?, likesCount: Int64?, commentsCount: Int64?, likesCounts: ReactionLikesCounts?, thumbnailFiles: [MediaFile]?, videoFiles: [MediaFile]?, hashtags: [String]?, adType: AdType?, orientation: Int?, timeline: [TimelineEvent]?) {
        self.id = id
        self.userId = userId
        self.originalVideoId = originalVideoId
        self.originalVideoUserId = originalVideoUserId
        self.title = title
        self.isDeleted = isDeleted
        self.isPrivate = isPrivate
        self.isUserPublic = isUserPublic
        self.isFeatured = isFeatured
        self.publishingTime = publishingTime
        self.featuredTime = featuredTime
        self.duration = duration
        self.recordVolume = recordVolume
        self.likesCount = likesCount
        self.commentsCount = commentsCount
        self.likesCounts = likesCounts
        self.thumbnailFiles = thumbnailFiles
        self.videoFiles = videoFiles
        self.hashtags = hashtags
        self.adType = adType
        self.orientation = orientation
//        self.timeline = timeline
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "_id")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(originalVideoId, forKey: "originalVideoId")
        try container.encodeIfPresent(originalVideoUserId, forKey: "originalVideoUserId")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(isPrivate, forKey: "isPrivate")
        try container.encodeIfPresent(isUserPublic, forKey: "isUserPublic")
        try container.encodeIfPresent(isFeatured, forKey: "isFeatured")
        try container.encodeIfPresent(publishingTime, forKey: "publishingTime")
        try container.encodeIfPresent(featuredTime, forKey: "featuredTime")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(recordVolume, forKey: "recordVolume")
        try container.encodeIfPresent(likesCount, forKey: "likesCount")
        try container.encodeIfPresent(commentsCount, forKey: "commentsCount")
        try container.encodeIfPresent(likesCounts, forKey: "likesCounts")
        try container.encodeIfPresent(thumbnailFiles, forKey: "thumbnailFiles")
        try container.encodeIfPresent(videoFiles, forKey: "videoFiles")
        try container.encodeIfPresent(hashtags, forKey: "hashtags")
        try container.encodeIfPresent(adType, forKey: "adType")
        try container.encodeIfPresent(orientation, forKey: "orientation")
//        try container.encodeIfPresent(timeline, forKey: "timeline")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "_id")
        userId = try container.decodeIfPresent(String.self, forKey: "userId")
        originalVideoId = try container.decodeIfPresent(UUID.self, forKey: "originalVideoId")
        originalVideoUserId = try container.decodeIfPresent(String.self, forKey: "originalVideoUserId")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        isPrivate = try container.decodeIfPresent(Bool.self, forKey: "isPrivate")
        isUserPublic = try container.decodeIfPresent(Bool.self, forKey: "isUserPublic")
        isFeatured = try container.decodeIfPresent(Bool.self, forKey: "isFeatured")
        publishingTime = try container.decodeIfPresent(Int64.self, forKey: "publishingTime")
        featuredTime = try container.decodeIfPresent(Int64.self, forKey: "featuredTime")
        duration = try container.decodeIfPresent(Double.self, forKey: "duration")
        recordVolume = try container.decodeIfPresent(Double.self, forKey: "recordVolume")
        likesCount = try container.decodeIfPresent(Int64.self, forKey: "likesCount")
        commentsCount = try container.decodeIfPresent(Int64.self, forKey: "commentsCount")
        likesCounts = try container.decodeIfPresent(ReactionLikesCounts.self, forKey: "likesCounts")
        thumbnailFiles = try container.decodeIfPresent([MediaFile].self, forKey: "thumbnailFiles")
        videoFiles = try container.decodeIfPresent([MediaFile].self, forKey: "videoFiles")
        hashtags = try container.decodeIfPresent([String].self, forKey: "hashtags")
        adType = try container.decodeIfPresent(AdType.self, forKey: "adType")
        orientation = try container.decodeIfPresent(Int.self, forKey: "orientation")
//        timeline = try container.decodeIfPresent([TimelineEvent].self, forKey: "timeline")
    }
}

