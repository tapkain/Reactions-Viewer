//
// ReactionLike.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** ReactionLike */

open class ReactionLike: Codable {

    public enum ModelType: String, Codable { 
        case love = "love"
        case lol = "lol"
        case wow = "wow"
        case sad = "sad"
        case angry = "angry"
    }
    public var id: String?
    public var userId: String?
    public var reactionId: UUID
    public var reactionUserId: String?
    public var likeTime: Int64?
    public var timeOffset: Double?
    public var type: ModelType


    
    public init(id: String?, userId: String?, reactionId: UUID, reactionUserId: String?, likeTime: Int64?, timeOffset: Double?, type: ModelType) {
        self.id = id
        self.userId = userId
        self.reactionId = reactionId
        self.reactionUserId = reactionUserId
        self.likeTime = likeTime
        self.timeOffset = timeOffset
        self.type = type
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "_id")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encode(reactionId, forKey: "reactionId")
        try container.encodeIfPresent(reactionUserId, forKey: "reactionUserId")
        try container.encodeIfPresent(likeTime, forKey: "likeTime")
        try container.encodeIfPresent(timeOffset, forKey: "timeOffset")
        try container.encode(type, forKey: "type")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(String.self, forKey: "_id")
        userId = try container.decodeIfPresent(String.self, forKey: "userId")
        reactionId = try container.decode(UUID.self, forKey: "reactionId")
        reactionUserId = try container.decodeIfPresent(String.self, forKey: "reactionUserId")
        likeTime = try container.decodeIfPresent(Int64.self, forKey: "likeTime")
        timeOffset = try container.decodeIfPresent(Double.self, forKey: "timeOffset")
        type = try container.decode(ModelType.self, forKey: "type")
    }
}

