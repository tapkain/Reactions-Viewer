//
// UserMe.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** User model of current user */

open class UserMe: Codable {

    public enum ScoreIcon: String, Codable { 
        case chick = "chick"
        case wink = "wink"
        case sunglasses = "sunglasses"
        case tongue = "tongue"
        case tongue2 = "tongue2"
        case crazy = "crazy"
        case star = "star"
        case cup = "cup"
        case diamond = "diamond"
        case pieroga = "pieroga"
        case crown = "crown"
        case fire = "fire"
    }
    public enum Relationship: String, Codable { 
        case followed = "followed"
        case unfollowed = "unfollowed"
        case requested = "requested"
        case blocking = "blocking"
        case blocked = "blocked"
        case unknown = "unknown"
    }
    /** UserId standardised attribute matching &#39;region_uuid&#39; or &#39;uuid&#39; regex pattern. Can not be updated. */
    public var id: String?
    public var displayname: String?
    public var username: String?
    public var followingsCount: Int?
    public var followersCount: Int?
    public var videosCount: Int?
    public var reactionsCount: Int?
    public var isDeleted: Bool?
    public var isPublic: Bool?
    public var isMsgPublic: Bool?
    public var isAdmin: Bool?
    public var isCampaign: Bool?
    public var score: Int?
    public var weeklyScore: Int?
    public var scoreIcon: ScoreIcon?
    public var scoreIsWeeklyTop: Bool?
    public var scoreIsFire: Bool?
    public var bio: String?
    public var avatarFiles: [MediaFile]?
    public var relationship: Relationship?
    public var pendingFollowers: Int?
    public var badge: Int?
    public var badgeMsg: Int?
    public var badgeOther: Int?


    
    public init(id: String?, displayname: String?, username: String?, followingsCount: Int?, followersCount: Int?, videosCount: Int?, reactionsCount: Int?, isDeleted: Bool?, isPublic: Bool?, isMsgPublic: Bool?, isAdmin: Bool?, isCampaign: Bool?, score: Int?, weeklyScore: Int?, scoreIcon: ScoreIcon?, scoreIsWeeklyTop: Bool?, scoreIsFire: Bool?, bio: String?, avatarFiles: [MediaFile]?, relationship: Relationship?, pendingFollowers: Int?, badge: Int?, badgeMsg: Int?, badgeOther: Int?) {
        self.id = id
        self.displayname = displayname
        self.username = username
        self.followingsCount = followingsCount
        self.followersCount = followersCount
        self.videosCount = videosCount
        self.reactionsCount = reactionsCount
        self.isDeleted = isDeleted
        self.isPublic = isPublic
        self.isMsgPublic = isMsgPublic
        self.isAdmin = isAdmin
        self.isCampaign = isCampaign
        self.score = score
        self.weeklyScore = weeklyScore
        self.scoreIcon = scoreIcon
        self.scoreIsWeeklyTop = scoreIsWeeklyTop
        self.scoreIsFire = scoreIsFire
        self.bio = bio
        self.avatarFiles = avatarFiles
        self.relationship = relationship
        self.pendingFollowers = pendingFollowers
        self.badge = badge
        self.badgeMsg = badgeMsg
        self.badgeOther = badgeOther
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "_id")
        try container.encodeIfPresent(displayname, forKey: "displayname")
        try container.encodeIfPresent(username, forKey: "username")
        try container.encodeIfPresent(followingsCount, forKey: "followingsCount")
        try container.encodeIfPresent(followersCount, forKey: "followersCount")
        try container.encodeIfPresent(videosCount, forKey: "videosCount")
        try container.encodeIfPresent(reactionsCount, forKey: "reactionsCount")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(isPublic, forKey: "isPublic")
        try container.encodeIfPresent(isMsgPublic, forKey: "isMsgPublic")
        try container.encodeIfPresent(isAdmin, forKey: "isAdmin")
        try container.encodeIfPresent(isCampaign, forKey: "isCampaign")
        try container.encodeIfPresent(score, forKey: "score")
        try container.encodeIfPresent(weeklyScore, forKey: "weeklyScore")
        try container.encodeIfPresent(scoreIcon, forKey: "scoreIcon")
        try container.encodeIfPresent(scoreIsWeeklyTop, forKey: "scoreIsWeeklyTop")
        try container.encodeIfPresent(scoreIsFire, forKey: "scoreIsFire")
        try container.encodeIfPresent(bio, forKey: "bio")
        try container.encodeIfPresent(avatarFiles, forKey: "avatarFiles")
        try container.encodeIfPresent(relationship, forKey: "relationship")
        try container.encodeIfPresent(pendingFollowers, forKey: "pendingFollowers")
        try container.encodeIfPresent(badge, forKey: "badge")
        try container.encodeIfPresent(badgeMsg, forKey: "badgeMsg")
        try container.encodeIfPresent(badgeOther, forKey: "badgeOther")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(String.self, forKey: "_id")
        displayname = try container.decodeIfPresent(String.self, forKey: "displayname")
        username = try container.decodeIfPresent(String.self, forKey: "username")
        followingsCount = try container.decodeIfPresent(Int.self, forKey: "followingsCount")
        followersCount = try container.decodeIfPresent(Int.self, forKey: "followersCount")
        videosCount = try container.decodeIfPresent(Int.self, forKey: "videosCount")
        reactionsCount = try container.decodeIfPresent(Int.self, forKey: "reactionsCount")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        isPublic = try container.decodeIfPresent(Bool.self, forKey: "isPublic")
        isMsgPublic = try container.decodeIfPresent(Bool.self, forKey: "isMsgPublic")
        isAdmin = try container.decodeIfPresent(Bool.self, forKey: "isAdmin")
        isCampaign = try container.decodeIfPresent(Bool.self, forKey: "isCampaign")
        score = try container.decodeIfPresent(Int.self, forKey: "score")
        weeklyScore = try container.decodeIfPresent(Int.self, forKey: "weeklyScore")
        scoreIcon = try container.decodeIfPresent(ScoreIcon.self, forKey: "scoreIcon")
        scoreIsWeeklyTop = try container.decodeIfPresent(Bool.self, forKey: "scoreIsWeeklyTop")
        scoreIsFire = try container.decodeIfPresent(Bool.self, forKey: "scoreIsFire")
        bio = try container.decodeIfPresent(String.self, forKey: "bio")
        avatarFiles = try container.decodeIfPresent([MediaFile].self, forKey: "avatarFiles")
        relationship = try container.decodeIfPresent(Relationship.self, forKey: "relationship")
        pendingFollowers = try container.decodeIfPresent(Int.self, forKey: "pendingFollowers")
        badge = try container.decodeIfPresent(Int.self, forKey: "badge")
        badgeMsg = try container.decodeIfPresent(Int.self, forKey: "badgeMsg")
        badgeOther = try container.decodeIfPresent(Int.self, forKey: "badgeOther")
    }
}

