//
// MediaFile.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** MediaFile */

open class MediaFile: Codable {

    public enum ModelType: String, Codable { 
        case full = "full"
        case preview = "preview"
        case micro = "micro"
    }
    public enum Fit: String, Codable { 
        case relative = "relative"
        case contain = "contain"
        case micro = "micro"
        case cover = "cover"
    }
    public var type: ModelType
    public var mimeType: String
    public var qualityType: String
    public var fit: Fit?
    public var id: String?
    public var key: String?
    public var base64: String?


    
    public init(type: ModelType, mimeType: String, qualityType: String, fit: Fit?, id: String?, key: String?, base64: String?) {
        self.type = type
        self.mimeType = mimeType
        self.qualityType = qualityType
        self.fit = fit
        self.id = id
        self.key = key
        self.base64 = base64
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(type, forKey: "type")
        try container.encode(mimeType, forKey: "mimeType")
        try container.encode(qualityType, forKey: "qualityType")
        try container.encodeIfPresent(fit, forKey: "fit")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(key, forKey: "key")
        try container.encodeIfPresent(base64, forKey: "base64")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        type = try container.decode(ModelType.self, forKey: "type")
        mimeType = try container.decode(String.self, forKey: "mimeType")
        qualityType = try container.decode(String.self, forKey: "qualityType")
        fit = try container.decodeIfPresent(Fit.self, forKey: "fit")
        id = try container.decodeIfPresent(String.self, forKey: "id")
        key = try container.decodeIfPresent(String.self, forKey: "key")
        base64 = try container.decodeIfPresent(String.self, forKey: "base64")
    }
}

