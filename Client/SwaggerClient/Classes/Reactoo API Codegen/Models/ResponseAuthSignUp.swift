//
// ResponseAuthSignUp.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Response model for auth/signUp, auth/resendConfirmationCode and auth/forgotPassword endpoint returned after successful user registration. If userConfirmed attribute equals false, user should have received an email or sms message with confirmation code which must be posted to auth/confirmSignUp endpoint to complete the registration process. */

open class ResponseAuthSignUp: Codable {

    public enum CodeDeliveryMedium: String, Codable { 
        case sms = "SMS"
        case email = "EMAIL"
        case _none = "NONE"
    }
    /** Determines whether additional confirmation is required. Use auth/confirmSignUp endpoint to complete the registration process. */
    public var userConfirmed: Bool
    /** The destination for the code delivery details. */
    public var codeDeliveryDestination: String?
    /** The delivery medium (email message or phone number). */
    public var codeDeliveryMedium: CodeDeliveryMedium?


    
    public init(userConfirmed: Bool, codeDeliveryDestination: String?, codeDeliveryMedium: CodeDeliveryMedium?) {
        self.userConfirmed = userConfirmed
        self.codeDeliveryDestination = codeDeliveryDestination
        self.codeDeliveryMedium = codeDeliveryMedium
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encode(userConfirmed, forKey: "userConfirmed")
        try container.encodeIfPresent(codeDeliveryDestination, forKey: "codeDeliveryDestination")
        try container.encodeIfPresent(codeDeliveryMedium, forKey: "codeDeliveryMedium")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        userConfirmed = try container.decode(Bool.self, forKey: "userConfirmed")
        codeDeliveryDestination = try container.decodeIfPresent(String.self, forKey: "codeDeliveryDestination")
        codeDeliveryMedium = try container.decodeIfPresent(CodeDeliveryMedium.self, forKey: "codeDeliveryMedium")
    }
}

