//
// Video.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Video */

open class Video: Codable {

    public enum AdType: String, Codable { 
        case trending = "trending"
        case featured = "featured"
        case latest = "latest"
    }
    /** Standardised Id attribute matching &#39;uuid&#39; regex pattern. Can not be updated. */
    public var id: UUID?
    /** UserId standardised attribute matching &#39;region_uuid&#39; or &#39;uuid&#39; regex pattern. Can not be updated. */
    public var userId: String?
    public var title: String?
    public var description: String?
    public var isDeleted: Bool?
    public var isPrivate: Bool?
    public var isUserPublic: Bool?
    public var isFeatured: Bool?
    public var publishingTime: Int64?
    public var featuredTime: Int64?
    public var duration: Double?
    public var aspectRatio: Double?
    public var reactionsCount: Int?
    public var publicReactionsCount: Int?
    public var thumbnailFiles: [MediaFile]?
    public var videoFiles: [MediaFile]?
    public var hashtags: [String]?
    public var adType: AdType?
    public var trendinessScore: Double?


    
    public init(id: UUID?, userId: String?, title: String?, description: String?, isDeleted: Bool?, isPrivate: Bool?, isUserPublic: Bool?, isFeatured: Bool?, publishingTime: Int64?, featuredTime: Int64?, duration: Double?, aspectRatio: Double?, reactionsCount: Int?, publicReactionsCount: Int?, thumbnailFiles: [MediaFile]?, videoFiles: [MediaFile]?, hashtags: [String]?, adType: AdType?, trendinessScore: Double?) {
        self.id = id
        self.userId = userId
        self.title = title
        self.description = description
        self.isDeleted = isDeleted
        self.isPrivate = isPrivate
        self.isUserPublic = isUserPublic
        self.isFeatured = isFeatured
        self.publishingTime = publishingTime
        self.featuredTime = featuredTime
        self.duration = duration
        self.aspectRatio = aspectRatio
        self.reactionsCount = reactionsCount
        self.publicReactionsCount = publicReactionsCount
        self.thumbnailFiles = thumbnailFiles
        self.videoFiles = videoFiles
        self.hashtags = hashtags
        self.adType = adType
        self.trendinessScore = trendinessScore
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "_id")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(isDeleted, forKey: "isDeleted")
        try container.encodeIfPresent(isPrivate, forKey: "isPrivate")
        try container.encodeIfPresent(isUserPublic, forKey: "isUserPublic")
        try container.encodeIfPresent(isFeatured, forKey: "isFeatured")
        try container.encodeIfPresent(publishingTime, forKey: "publishingTime")
        try container.encodeIfPresent(featuredTime, forKey: "featuredTime")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(aspectRatio, forKey: "aspectRatio")
        try container.encodeIfPresent(reactionsCount, forKey: "reactionsCount")
        try container.encodeIfPresent(publicReactionsCount, forKey: "publicReactionsCount")
        try container.encodeIfPresent(thumbnailFiles, forKey: "thumbnailFiles")
        try container.encodeIfPresent(videoFiles, forKey: "videoFiles")
        try container.encodeIfPresent(hashtags, forKey: "hashtags")
        try container.encodeIfPresent(adType, forKey: "adType")
        try container.encodeIfPresent(trendinessScore, forKey: "trendinessScore")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "_id")
        userId = try container.decodeIfPresent(String.self, forKey: "userId")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        isDeleted = try container.decodeIfPresent(Bool.self, forKey: "isDeleted")
        isPrivate = try container.decodeIfPresent(Bool.self, forKey: "isPrivate")
        isUserPublic = try container.decodeIfPresent(Bool.self, forKey: "isUserPublic")
        isFeatured = try container.decodeIfPresent(Bool.self, forKey: "isFeatured")
        publishingTime = try container.decodeIfPresent(Int64.self, forKey: "publishingTime")
        featuredTime = try container.decodeIfPresent(Int64.self, forKey: "featuredTime")
        duration = try container.decodeIfPresent(Double.self, forKey: "duration")
        aspectRatio = try container.decodeIfPresent(Double.self, forKey: "aspectRatio")
        reactionsCount = try container.decodeIfPresent(Int.self, forKey: "reactionsCount")
        publicReactionsCount = try container.decodeIfPresent(Int.self, forKey: "publicReactionsCount")
        thumbnailFiles = try container.decodeIfPresent([MediaFile].self, forKey: "thumbnailFiles")
        videoFiles = try container.decodeIfPresent([MediaFile].self, forKey: "videoFiles")
        hashtags = try container.decodeIfPresent([String].self, forKey: "hashtags")
        adType = try container.decodeIfPresent(AdType.self, forKey: "adType")
        trendinessScore = try container.decodeIfPresent(Double.self, forKey: "trendinessScore")
    }
}

