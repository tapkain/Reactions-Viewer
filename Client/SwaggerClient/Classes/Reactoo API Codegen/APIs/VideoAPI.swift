//
// VideoAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VideoAPI {
    /**
     Delete video
     
     - parameter id: (query) Video Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteVideo(id: UUID, completion: @escaping ((_ error: Error?) -> Void)) {
        deleteVideoWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Delete video
     - DELETE /video
     - Deletes video.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter id: (query) Video Id. Value must match Id model. 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteVideoWithRequestBuilder(id: UUID) -> RequestBuilder<Void> {
        let path = "/video"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Fetch video by Id
     
     - parameter id: (query) Video Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideoById(id: UUID, completion: @escaping ((_ data: Video?,_ error: Error?) -> Void)) {
        getVideoByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch video by Id
     - GET /video
     - Fetches video by Id and returns Video model.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "hashtags" : [ "hashtags", "hashtags" ],
  "reactionsCount" : 0,
  "isUserPublic" : true,
  "description" : "description",
  "aspectRatio" : 0.5962133916683182,
  "publicReactionsCount" : 0,
  "isPrivate" : false,
  "title" : "title",
  "thumbnailFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "userId" : "userId",
  "duration" : 0.14658129805029452,
  "videoFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "featuredTime" : 0,
  "adType" : "trending",
  "isDeleted" : false,
  "publishingTime" : 0,
  "_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "trendinessScore" : 0.7061401241503109,
  "isFeatured" : false
}}]
     
     - parameter id: (query) Video Id. Value must match Id model. 

     - returns: RequestBuilder<Video> 
     */
    open class func getVideoByIdWithRequestBuilder(id: UUID) -> RequestBuilder<Video> {
        let path = "/video"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Video>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getVideos: String { 
        case following = "following"
        case personalised = "personalised"
        case trending = "trending"
        case featured = "featured"
        case latest = "latest"
        case hashtag = "hashtag"
        case related = "related"
        case user = "user"
        case youtube = "youtube"
        case facebook = "facebook"
        case instagram = "instagram"
    }

    /**
     * enum for parameter withPublicReactions
     */
    public enum WithPublicReactions_getVideos: String { 
        case _true = "true"
        case _false = "false"
        case _0 = "0"
        case _1 = "1"
        case empty = ""
    }

    /**
     * enum for parameter includeUserModels
     */
    public enum IncludeUserModels_getVideos: String { 
        case _true = "true"
        case _false = "false"
        case _0 = "0"
        case _1 = "1"
        case empty = ""
    }

    /**
     Fetch multiple videos
     
     - parameter type: (query) Video list type. Value must match RequestVideoListType model. 
     - parameter userId: (query) Show videos of specific user. Value must match UserId model. (optional)
     - parameter fulltextPhrase: (query) Show videos matching fulltext phrase. Value must match FulltextPhrase model. (optional)
     - parameter videoId: (query) Fetch similar videos to this specific video. Value must match Id model. (optional)
     - parameter startKey: (query) Video list start key. Value must match RequestListStartKey model. (optional)
     - parameter withPublicReactions: (query) Fetch videos with at least one public reaction. Value must match RequestQueryBoolean model. (optional, default to )
     - parameter excludeUserId: (query) Exclude videos posted by specific user from the resultset. Value must match UserId model. (optional)
     - parameter hashtag: (query) Fetch videos containing specific hashtag. Value must match Hashtag model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter excludeVideoId: (query) Exclude specific video from resultset. Value must match Id model. (optional)
     - parameter size: (query) Video list size. Value must match RequestListSize model. (optional, default to 20)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideos(type: ModelType_getVideos, userId: String? = nil, fulltextPhrase: String? = nil, videoId: UUID? = nil, startKey: String? = nil, withPublicReactions: WithPublicReactions_getVideos? = nil, excludeUserId: String? = nil, hashtag: String? = nil, includeUserModels: IncludeUserModels_getVideos? = nil, excludeVideoId: UUID? = nil, size: Int? = nil, completion: @escaping ((_ data: VideoList?,_ error: Error?) -> Void)) {
        getVideosWithRequestBuilder(type: type, userId: userId, fulltextPhrase: fulltextPhrase, videoId: videoId, startKey: startKey, withPublicReactions: withPublicReactions, excludeUserId: excludeUserId, hashtag: hashtag, includeUserModels: includeUserModels, excludeVideoId: excludeVideoId, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Fetch multiple videos
     - GET /video/list
     - Fetches list of videos and returns VideoList model containing zero or more Video models.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example=""}]
     
     - parameter type: (query) Video list type. Value must match RequestVideoListType model. 
     - parameter userId: (query) Show videos of specific user. Value must match UserId model. (optional)
     - parameter fulltextPhrase: (query) Show videos matching fulltext phrase. Value must match FulltextPhrase model. (optional)
     - parameter videoId: (query) Fetch similar videos to this specific video. Value must match Id model. (optional)
     - parameter startKey: (query) Video list start key. Value must match RequestListStartKey model. (optional)
     - parameter withPublicReactions: (query) Fetch videos with at least one public reaction. Value must match RequestQueryBoolean model. (optional, default to )
     - parameter excludeUserId: (query) Exclude videos posted by specific user from the resultset. Value must match UserId model. (optional)
     - parameter hashtag: (query) Fetch videos containing specific hashtag. Value must match Hashtag model. (optional)
     - parameter includeUserModels: (query) Includes users models of users contained in &#39;items&#39; attribute as &#39;users&#39; attribute (optional, default to )
     - parameter excludeVideoId: (query) Exclude specific video from resultset. Value must match Id model. (optional)
     - parameter size: (query) Video list size. Value must match RequestListSize model. (optional, default to 20)

     - returns: RequestBuilder<VideoList> 
     */
    open class func getVideosWithRequestBuilder(type: ModelType_getVideos, userId: String? = nil, fulltextPhrase: String? = nil, videoId: UUID? = nil, startKey: String? = nil, withPublicReactions: WithPublicReactions_getVideos? = nil, excludeUserId: String? = nil, hashtag: String? = nil, includeUserModels: IncludeUserModels_getVideos? = nil, excludeVideoId: UUID? = nil, size: Int? = nil) -> RequestBuilder<VideoList> {
        let path = "/video/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId, 
            "fulltextPhrase": fulltextPhrase, 
            "videoId": videoId, 
            "startKey": startKey, 
            "type": type.rawValue, 
            "withPublicReactions": withPublicReactions?.rawValue, 
            "excludeUserId": excludeUserId, 
            "hashtag": hashtag, 
            "includeUserModels": includeUserModels?.rawValue, 
            "excludeVideoId": excludeVideoId, 
            "size": size?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<VideoList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Initiate video upload
     
     - parameter id: (query) Id. Value must match Id model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initiateVideoUpload(id: UUID, completion: @escaping ((_ data: ResponseInitiateUpload?,_ error: Error?) -> Void)) {
        initiateVideoUploadWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Initiate video upload
     - POST /video/initiateUpload
     - Initiates video upload and returns AWS signed URL to S3 or CloudFront services to upload an actual video file, preferably using AWS S3 uploader.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "urlType" : "s3",
  "expires" : 0,
  "httpMethod" : "PUT",
  "signedUrl" : "signedUrl"
}}]
     
     - parameter id: (query) Id. Value must match Id model. 

     - returns: RequestBuilder<ResponseInitiateUpload> 
     */
    open class func initiateVideoUploadWithRequestBuilder(id: UUID) -> RequestBuilder<ResponseInitiateUpload> {
        let path = "/video/initiateUpload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<ResponseInitiateUpload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Initiate public video upload
     
     - parameter campaignId: (query) Campaign Id. Value must match UserId model. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func initiateVideoUploadPublic(campaignId: String, completion: @escaping ((_ data: ResponseInitiateUpload?,_ error: Error?) -> Void)) {
        initiateVideoUploadPublicWithRequestBuilder(campaignId: campaignId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Initiate public video upload
     - POST /video/initiateUploadPublic
     - Initiates public video upload and returns AWS signed URL to S3 or CloudFront services to upload an actual video file, preferably using AWS S3 uploader. Method does not require authorisation.
     - API Key:
       - type: apiKey x-api-key 
       - name: api_key
     - examples: [{contentType=application/json, example={
  "urlType" : "s3",
  "expires" : 0,
  "httpMethod" : "PUT",
  "signedUrl" : "signedUrl"
}}]
     
     - parameter campaignId: (query) Campaign Id. Value must match UserId model. 

     - returns: RequestBuilder<ResponseInitiateUpload> 
     */
    open class func initiateVideoUploadPublicWithRequestBuilder(campaignId: String) -> RequestBuilder<ResponseInitiateUpload> {
        let path = "/video/initiateUploadPublic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "campaignId": campaignId
        ])
        

        let requestBuilder: RequestBuilder<ResponseInitiateUpload>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create/update video
     
     - parameter video: (body)  
     - parameter facebookId: (query) Facebook ID if video was originally fetched from Facebook. (optional)
     - parameter instagramId: (query) Instagram ID if video was originally fetched from Instagram. (optional)
     - parameter youtubeId: (query) Youtube ID if video was originally fetched from Youtube. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publishVideo(video: Video, facebookId: String? = nil, instagramId: String? = nil, youtubeId: String? = nil, completion: @escaping ((_ data: Video?,_ error: Error?) -> Void)) {
        publishVideoWithRequestBuilder(video: video, facebookId: facebookId, instagramId: instagramId, youtubeId: youtubeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create/update video
     - POST /video
     - Creates and publishes a video if it doesn't exist yet or updates existing one. Call this endpoint after successful upload.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{contentType=application/json, example={
  "hashtags" : [ "hashtags", "hashtags" ],
  "reactionsCount" : 0,
  "isUserPublic" : true,
  "description" : "description",
  "aspectRatio" : 0.5962133916683182,
  "publicReactionsCount" : 0,
  "isPrivate" : false,
  "title" : "title",
  "thumbnailFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "userId" : "userId",
  "duration" : 0.14658129805029452,
  "videoFiles" : [ {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  }, {
    "fit" : "relative",
    "base64" : "base64",
    "mimeType" : "mimeType",
    "qualityType" : "qualityType",
    "id" : "id",
    "type" : "full",
    "key" : "key"
  } ],
  "featuredTime" : 0,
  "adType" : "trending",
  "isDeleted" : false,
  "publishingTime" : 0,
  "_id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "trendinessScore" : 0.7061401241503109,
  "isFeatured" : false
}}]
     
     - parameter video: (body)  
     - parameter facebookId: (query) Facebook ID if video was originally fetched from Facebook. (optional)
     - parameter instagramId: (query) Instagram ID if video was originally fetched from Instagram. (optional)
     - parameter youtubeId: (query) Youtube ID if video was originally fetched from Youtube. (optional)

     - returns: RequestBuilder<Video> 
     */
    open class func publishVideoWithRequestBuilder(video: Video, facebookId: String? = nil, instagramId: String? = nil, youtubeId: String? = nil) -> RequestBuilder<Video> {
        let path = "/video"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: video)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "facebookId": facebookId, 
            "instagramId": instagramId, 
            "youtubeId": youtubeId
        ])
        

        let requestBuilder: RequestBuilder<Video>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update video
     
     - parameter id: (query) Video Id. Value must match Id model. 
     - parameter video: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateVideo(id: UUID, video: Video, completion: @escaping ((_ error: Error?) -> Void)) {
        updateVideoWithRequestBuilder(id: id, video: video).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update video
     - PUT /video
     - Updates video.
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     
     - parameter id: (query) Video Id. Value must match Id model. 
     - parameter video: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateVideoWithRequestBuilder(id: UUID, video: Video) -> RequestBuilder<Void> {
        let path = "/video"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: video)

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "id": id
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
