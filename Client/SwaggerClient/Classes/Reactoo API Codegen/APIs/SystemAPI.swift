//
// SystemAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SystemAPI {
    /**
     Swagger.html
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSwaggerHtml(completion: @escaping ((_ error: Error?) -> Void)) {
        getSwaggerHtmlWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Swagger.html
     - GET /
     - Swagger v2 documentation
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func getSwaggerHtmlWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Swagger.json
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSwaggerJson(completion: @escaping ((_ error: Error?) -> Void)) {
        getSwaggerJsonWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Swagger.json
     - GET /swagger.json
     - Swagger v2 JSON definition file
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func getSwaggerJsonWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/swagger.json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Swagger.yml
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSwaggerYaml(completion: @escaping ((_ error: Error?) -> Void)) {
        getSwaggerYamlWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Swagger.yml
     - GET /swagger.yml
     - Swagger v2 YAML definition file
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]
     - responseHeaders: [Access-Control-Allow-Origin(String), Access-Control-Allow-Methods(String), Access-Control-Allow-Credentials(String), Access-Control-Allow-Headers(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func getSwaggerYamlWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/swagger.yml"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Test authentication
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func testCredentials(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        testCredentialsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Test authentication
     - GET /auth/testCredentials
     - Verifies supplied idToken
     - API Key:
       - type: apiKey Authorization 
       - name: cognito-g1
     - examples: [{output=none}]

     - returns: RequestBuilder<String> 
     */
    open class func testCredentialsWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/auth/testCredentials"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
